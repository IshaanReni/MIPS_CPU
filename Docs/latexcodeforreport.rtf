{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \\documentclass\{article\}\
\
% Language setting\
% Replace `english' with e.g. `spanish' to change the document language\
\\usepackage[english]\{babel\}\
\
% Set page size and margins\
% Replace `letterpaper' with`a4paper' for UK/EU standard size\
\\usepackage[letterpaper,top=2cm,bottom=2cm,left=3cm,right=3cm,marginparwidth=1.75cm]\{geometry\}\
\
% Useful packages\
\\usepackage\{amsmath\}\
\\usepackage\{graphicx\}\
\\usepackage[colorlinks=true, allcolors=blue]\{hyperref\}\
\
\\title\{MIPS DATA SHEET - Team 3\\vspace\{-2em\}\}\
\\date\{\}\
\
\\setlength\{\\arrayrulewidth\}\{0.5mm\}\
\\setlength\{\\tabcolsep\}\{30pt\}\
\\renewcommand\{\\arraystretch\}\{1.5\}\
\
\\begin\{document\}\
\\maketitle\
\
\\section\{CPU Architecture\}\
\
\\subsection\{A Diagram of our CPU Architecture\}\
\
\\begin\{figure\}[htp]\
\\centering\
\\includegraphics[width=0.7\\textwidth]\{top-level.jpg\}\
\\caption\{\\label\{fig:CPU Architecture\}This diagram shows the CPU Architecture.\}\
\\end\{figure\}\
\
\\subsection\{Architecture Overview\}\
\
\\begin\{tabular\}\{ |p\{3cm\}|p\{8cm\}|\}\
\\hline\
\\multicolumn\{2\}\{|c|\}\{Block Descriptions\} \\\\\
\\hline\
MIPS CPU Bus & This block is the main interface between the RAM\
and the rest of the CPU. It adheres to Avalon(R)\
specifications.  \\\\\
Control Unit & This block handles the timings of the CPU and trans-\
fers data to and from the other blocks. This block \
is the only block to directly interface with the CPU \
bus. \\\\\
State Machine & This block controls which state the current CPU is \
in - this block also enables the ability to stall, halt, \
and reset the CPU.  \\\\\
Instruction Register & This block is responsible for decoding the instruction\
and sending information to the Control Unit about \
the current Instruction Word. \\\\\
Program Counter & This block keeps track of the address in the RAM of \
which instruction is currently being executed; setting this to 0 causes the CPU to halt. \\\\\
Arithmetic Logic Unit & This block is responsible for all the arithmetic capabilities of the CPU, as well as comparator operations required for conditional branches.  \\\\\
Load and Store & 0 / This block allows writing to the RAM as well as storing data from the RAM into the registers.  \\\\\
Register File & This block contains all 32 MIPS registers, and has the ability to read from two registers at any point as well as writing data to any one register.\\\\\
\\hline\
\\end\{tabular\}\
\
\
\\section\{Designing the CPU\}\
\
\\subsection\{Design Decisions\}\
\
In order to avoid complications due to the precise timings of the CPU, we decided to break down the CPU into several different units, which would allow each group member to focus on the functionality of a single block. \
\
Additionally, to avoid the issue of coordinating timings between all the blocks, we decided to offload this task to the Control Unit, which sends signals to each block when the currently-executing instruction requires it. \
\
This means that each block does not need to worry about timings or which cycle the CPU is in, but will simply operate on the data when and if it receives the necessary data. The separate blocks are listed in the architecture overview. \
\
\
In order to make the task of designing this CPU more familiar to us, we decided to implement the standard 3-cycle execution cycle per instruction, FETCH, EXEC1 and EXEC2, with the ability to stall each of these states and a halt state. We determined that this 3-stage execution would be possible if all the arithmetic instructions could be done in a single cycle, which we found they were.\
\
\
\\subsection\{Features and Advantages\}\
\
\\section\{Testing the CPU\}\
\
\\subsection\{Testing Approach\}\
\
\\subsection\{Test Flow Diagram\}\
\
\\section\{Area and Timing Summary\}\
\
\
\
\\begin\{tabular\}\{ |p\{5.95cm\}|p\{5.95cm\}|\}\
\\hline\
\\multicolumn\{2\}\{|c|\}\{Area Summary\} \\\\\
\\hline\
Revision Name & \\texttt\{mips\\_cpu\\_bus\}  \\\\\
Top-Level Entity Name & \\texttt\{mips\\_cpu\\_bus\} \\\\\
Total Logic Elements Name & 6178/10,320 (60\\%)  \\\\\
Total Registers & 1036 \\\\\
Total Pins & 138/180 (77\\%) \\\\\
Total Virtual Pins & 0  \\\\\
Total Memory Bits & 0 / 423,936 (0\\%) \\\\\
Embedded Multiplier 9-bit elements & 8/46 (17\\%)\\\\\
Total PLLs & 0/2 (0\\%)  \\\\\
\\hline\
\\end\{tabular\}\
\
\\hfill \\break\
\
\\begin\{tabular\}\{ |p\{3cm\}|p\{3cm\}|p\{3cm\}|  \}\
\\hline\
\\multicolumn\{3\}\{|c|\}\{Timing Summary\} \\\\\
\\hline\
FMax& Restricted FMax & Clock Name \\\\\
\\hline\
4.61 MHz & 4.61 MHz & ControlUnit:cpuCU\\|\
\
IW[29] \\\\\
64.36 MHz & 64.36 MHz & ControlUnit:cpuCU\\|\
\
statemac:cpuSM\\|e1\\\\\
143.04 MHz & 143.04 MHz & clk \\\\\
\\hline\
\\end\{tabular\}\
\
\\section\{References\}\
\
Price, C., 1995,  \\emph\{MIPS IV Instruction Set\} [Online]\
\
Available at: \\url\{https://www.cs.cmu.edu/afs/cs/academic/class/15740-f97/public/doc/mips-isa.pdf\} [Accessed 15 December 2021]\
\
Soares, J., and Rocha, R., 2019-2020,  \\emph\{Encoding MIPS Instructions\} [Online]\
\
Available at: \\url\{https://www.dcc.fc.up.pt/~ricroc/aulas/1920/ac/apontamentos/P04_encoding_mips_instructions.pdf\} [Accessed 16 December 2021]\
\
OpenCores, 2019-2020,  \\emph\{Most MIPS I(TM) Opcodes\} [Online]\
\
Available at: \\url\{https://opencores.org/projects/plasma/opcodes\} [Accessed 16 December 2021]\
\
Berkeley, \\emph\{MIPS Reference Sheet\} [Online]\
\
Available at: \\url\{https://inst.eecs.berkeley.edu/~cs61c/resources/MIPS_help.html\} [Accessed 17 December 2021]\
\
Pakin, S., 2021, \\emph\{The Comprehensive LATEX Symbol List\} [Online]\
\
Available at: \\url\{http://tug.ctan.org/info/symbols/comprehensive/symbols-a4.pdf\} [Accessed 17 December 2021]\
\
\\end\{document\}}